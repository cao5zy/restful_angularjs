<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="$(SolutionDir)\bin\Models.Dll"  #>
<#@ output extension=".html" #>

<# var codeHelper = new CodeHelper();#>
<!-- header -->
<tr>
<# foreach(var fieldName in codeHelper.GetHeaders()){#>
	<th><#=fieldName#></th>
<#}#>
</tr>

<!-- row -->
<tr>
<# foreach(var fileName in codeHelper.GetFieldNames()){#>
	<td>{{<#=fileName#>}}</td>
<#}#>
</tr>
<#+
public class CodeHelper{
	public readonly Func<List<string>> GetHeaders = ()=>new List<string>();
	public readonly Func<List<string>> GetFieldNames = ()=>new List<string>();

	public CodeHelper(){
		var getTypePropertyNames = new Func<Type, IEnumerable<string>>((tp)=>{
				return from property in tp.GetProperties(BindingFlags.Public | BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.DeclaredOnly)
					select property.Name;
			});

		var getType = new Func<Type>(()=>{
			return typeof(Models.User);
		});

		if (getType() != null){
			this.GetHeaders = new Func<List<string>>(()=>{
				return getTypePropertyNames(getType()).ToList();
			});

			this.GetFieldNames = new Func<List<string>>(()=>{
				return getTypePropertyNames(getType()).ToList();
			});
		}
		
	}
}
#>