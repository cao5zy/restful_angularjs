<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="$(SolutionDir)\bin\UserService.Dll"  #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Models;

<# var codeHelper = new CodeHelper(); #>
namespace UserService
{
    public class InfrastructureService : IUserService
    {
		private IUserService _service = null;
        private log4net.ILog _log = null;

		public InfrastructureService(IUserService service, log4net.ILog logger)
        {
            this._service = service;
			this._log = logger;
        }
<# foreach(var name in codeHelper.GetMethodNames()){#>

		public <#=codeHelper.GetReturnTypeName(name)#> <#=name#>(<#=codeHelper.GetParamDeclarations(name)#>){
			try{
				this._log.Debug(new {<# var ls = (from paramName in codeHelper.GetParamNames(name)
				select new { name = paramName, val = paramName}).ToList();

				ls.Add(new {name = "_name", val = "\"" + name + "\""});
				#><#=string.Join(", ", ls.ConvertAll(n=>n.name + "=" + n.val))#>});
				<#=codeHelper.GetReturnStatement(name)#> this._service.<#=name#>(<#=codeHelper.GetParams(name)#>);
			}
			catch(Exception ex)
			{
				this._log.Error(new { name = "<#=name#>", ex = ex});
				<#=codeHelper.GetDefaultReturn(name)#>
			}
		}
<#}#>
	}
}


<#+
public class CodeHelper
{
	public readonly Func<List<string>> GetMethodNames = null;
	public readonly Func<string, string> GetReturnTypeName = null;
	public readonly Func<string, string> GetParamDeclarations = null;
	public readonly Func<string, string> GetParams = null;
	public readonly Func<string, string> GetReturnStatement = null;
	public readonly Func<string, IEnumerable<string>> GetParamNames = null;
	public readonly Func<string, string> GetDefaultReturn = null;

	public CodeHelper(){
		var methods = from method in typeof(UserService.UserService).GetMethods(BindingFlags.Public | BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.DeclaredOnly) select method;
		var oneMethod = new Func<string, MethodInfo>((methodName)=>{
			return (from method in methods where method.Name == methodName select method).First();
		});
		var convertList = new Func<string, string>((rawName)=>{
				return new Func<string, string>((handledName)=>{
					return handledName != rawName ? $"List<{handledName}>" : rawName;
				})(rawName.Replace("System.Collections.Generic.List`1", "").Replace("[", "").Replace("]", ""));
			});

		this.GetMethodNames = ()=>{
			return (from method in methods
			select method.Name).ToList();
		};

		this.GetReturnTypeName = (methodName)=>{
			var convertVoid = new Func<string, string>((rawName)=>{
				return rawName == "System.Void" ? "void" : rawName;
			});
			return convertList(convertVoid(oneMethod(methodName).ReturnType.ToString()));
		};

		this.GetParamDeclarations = (methodName)=>{
			return string.Join(",", (from parameter in oneMethod(methodName).GetParameters()
				select $"{convertList(parameter.ParameterType.ToString())} {parameter.Name}")
			.ToArray());
		};

		this.GetParams = (methodName)=>{
			return string.Join(",", this.GetParamNames(methodName).ToArray());
		};

		this.GetParamNames = (methodName)=>{
			return from parameter in oneMethod(methodName).GetParameters() select $"{parameter.Name}";
		};

		this.GetReturnStatement = (methodName)=>{
			return this.GetReturnTypeName(methodName) != "void" ? "return" : "";
		};

		this.GetDefaultReturn = (methodName)=>{
			var getType = new Func<string, string>((returnTypeName)=>{
				return new Func<KeyValuePair<string, Func<string, bool>>, string>((keyPair)=>{
					return string.IsNullOrEmpty(keyPair.Key) ? "" : keyPair.Key;

					})(new List<KeyValuePair<string, Func<string, bool>>>{
					new KeyValuePair<string, Func<string, bool>> ("string", 
						new Func<string, bool>((name)=>{return name.ToLower().Contains("string");})
						),
					new KeyValuePair<string, Func<string, bool>>(
						"number",
						new Func<string, bool>((name)=>{return name.ToLower().Contains("int")
							|| name.ToLower().Contains("long")
							|| name.ToLower().Contains("decimal")
							|| name.ToLower().Contains("float")
							|| name.ToLower().Contains("double");})
					),
					new KeyValuePair<string, Func<string, bool>>(
						"void",
						new Func<string, bool>((name)=>{ return name.ToLower().Contains("void");})
					)
				}.Find(n=>n.Value(returnTypeName)));
			});

			return new Func<string, string>((typeCategory)=>{
				return string.IsNullOrEmpty(typeCategory) ?
				"return null;": new Dictionary<string, string>{
							{"string", "return \"\";"},
							{"number","return 0;"},
							{"void",""}
						}[typeCategory];
				})(getType(this.GetReturnTypeName(methodName)));
			
		};
	}
}
#>