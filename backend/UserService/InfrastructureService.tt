<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ assembly name="$(SolutionDir)\bin\UserService.Dll"  #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Models;

<# var codeHelper = new CodeHelper(); #>
namespace UserService
{
    public class InfrastructureService : IUserService
    {
		private IUserService _service = null;
		public InfrastructureService(IUserService service)
        {
            this._service = service;
        }
<# foreach(var name in codeHelper.GetMethodNames()){#>

		public <#=codeHelper.GetReturnTypeName(name)#> <#=name#>(<#=codeHelper.GetParamDeclarations(name)#>){
			try{
				<#=codeHelper.GetReturnStatement(name)#> this._service.<#=name#>(<#=codeHelper.GetParams(name)#>);
			}
			catch(Exception ex)
			{
				//Log ex
				throw;
			}
		}
<#}#>
	}
}


<#+
public class CodeHelper
{
	public readonly Func<List<string>> GetMethodNames = null;
	public readonly Func<string, string> GetReturnTypeName = null;
	public readonly Func<string, string> GetParamDeclarations = null;
	public readonly Func<string, string> GetParams = null;
	public readonly Func<string, string> GetReturnStatement = null;

	public CodeHelper(){
		var methods = from method in typeof(UserService.UserService).GetMethods(BindingFlags.Public | BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.DeclaredOnly) select method;
		var oneMethod = new Func<string, MethodInfo>((methodName)=>{
			return (from method in methods where method.Name == methodName select method).First();
		});
		var convertList = new Func<string, string>((rawName)=>{
				return new Func<string, string>((handledName)=>{
					return handledName != rawName ? $"List<{handledName}>" : rawName;
				})(rawName.Replace("System.Collections.Generic.List`1", "").Replace("[", "").Replace("]", ""));
			});

		this.GetMethodNames = ()=>{
			return (from method in methods
			select method.Name).ToList();
		};

		this.GetReturnTypeName = (methodName)=>{
			var convertVoid = new Func<string, string>((rawName)=>{
				return rawName == "System.Void" ? "void" : rawName;
			});
			return convertList(convertVoid(oneMethod(methodName).ReturnType.ToString()));
		};

		this.GetParamDeclarations = (methodName)=>{
			return string.Join(",", (from parameter in oneMethod(methodName).GetParameters()
				select $"{convertList(parameter.ParameterType.ToString())} {parameter.Name}")
			.ToArray());
		};

		this.GetParams = (methodName)=>{
			return string.Join(",", (from parameter in oneMethod(methodName).GetParameters() select $"{parameter.Name}").ToArray());
		};

		this.GetReturnStatement = (methodName)=>{
			return this.GetReturnTypeName(methodName) != "void" ? "return" : "";
		};
	}
}
#>